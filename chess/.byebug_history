exit
king_moves
n
king_moves.empty?
n
king_moves.all? { |pos| opp_moves.include?(pos) }
opp_moves
king_moves
c
exit
king_moves
c
exit
king_moves.all? { |pos| opp_moves.include?(pos) }
opp_moves.include?(pos)
opp_moves
king_moves
quit
color
n
s
start_pos
c
n
self[start_pos[0], start_pos[1]].color
self[end_pos[0], end_pos[1]].color
n
self[start_pos[0], start_pos[1]]
self[end_pos[0], end_pos[1]]
exit
@pos
valid_moves
c
exit
hor
vir
exit
vir
quit
n
display y_diff
display x_diff
y
x
quit
b
vir
n
hor
n
@pos
s
quit
n
valid_moves
c
self.is_a?(King)
self.is_a?(Pawn)
quit
total_avilible
exit
total_avilible
n
!@board[1,1].is_a?(NullPiece)
n
display moves
n
s
moves
n
@color
n
s
c
s
n
valid_moves
n
@pos
n
s
exit
self[start_pos[0],start_pos[1]].color
self[start_pos[0],start_pos[1]]
self[start_pos[0],start_pos[1]].class
@grid[start_pos[0]][start_pos[1]]
self[start_pos[0],start_pos[1]]
c
q
n
new_pos
n
diff
